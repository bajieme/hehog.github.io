(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{523:function(v,_,i){"use strict";i.r(_);var t=i(3),l=Object(t.a)({},(function(){var v=this,_=v.$createElement,i=v._self._c||_;return i("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[i("h1",{attrs:{id:"设计模式"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#设计模式"}},[v._v("#")]),v._v(" 设计模式")]),v._v(" "),i("h2",{attrs:{id:"一、设计模式简介"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#一、设计模式简介"}},[v._v("#")]),v._v(" 一、设计模式简介")]),v._v(" "),i("p",[v._v("设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。")]),v._v(" "),i("p",[v._v("设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问，设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。项目中合理地运用设计模式可以完美地解决很多问题，每种模式在现实中都有相应的原理来与之对应，每种模式都描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是设计模式能被广泛应用的原因。")]),v._v(" "),i("h2",{attrs:{id:"二、设计模式的六大原则"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#二、设计模式的六大原则"}},[v._v("#")]),v._v(" 二、设计模式的六大原则")]),v._v(" "),i("p",[i("strong",[v._v("1、开闭原则（Open Close Principle）")])]),v._v(" "),i("p",[v._v("开闭原则的意思是："),i("strong",[v._v("对扩展开放，对修改关闭")]),v._v("。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。")]),v._v(" "),i("p",[i("strong",[v._v("2、里氏代换原则（Liskov Substitution Principle）")])]),v._v(" "),i("p",[v._v("里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。")]),v._v(" "),i("p",[i("strong",[v._v("3、依赖倒转原则（Dependence Inversion Principle）")])]),v._v(" "),i("p",[v._v("这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。")]),v._v(" "),i("p",[i("strong",[v._v("4、接口隔离原则（Interface Segregation Principle）")])]),v._v(" "),i("p",[v._v("这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。")]),v._v(" "),i("p",[i("strong",[v._v("5、迪米特法则，又称最少知道原则（Demeter Principle）")])]),v._v(" "),i("p",[v._v("最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。")]),v._v(" "),i("p",[i("strong",[v._v("6、合成复用原则（Composite Reuse Principle）")])]),v._v(" "),i("p",[v._v("合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。")]),v._v(" "),i("h2",{attrs:{id:"三、常用设计模式"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#三、常用设计模式"}},[v._v("#")]),v._v(" 三、常用设计模式")]),v._v(" "),i("ul",[i("li",[v._v("[x] 1、工厂模式")]),v._v(" "),i("li",[v._v("[x] 2、抽象工厂模式")]),v._v(" "),i("li",[v._v("[x] 3、单例模式")]),v._v(" "),i("li",[v._v("[x] 4、建造者模式")]),v._v(" "),i("li",[v._v("[x] 5、策略模式")]),v._v(" "),i("li",[v._v("[x] 6、模板模式")]),v._v(" "),i("li",[v._v("[x] 7、观察者模式")]),v._v(" "),i("li",[v._v("[x] 8、责任链模式")]),v._v(" "),i("li",[v._v("[x] 9、命令模式")]),v._v(" "),i("li",[v._v("[x] 10、代理模式")]),v._v(" "),i("li",[v._v("[x] 11、状态模式")]),v._v(" "),i("li",[v._v("[ ] 12、适配器模式")]),v._v(" "),i("li",[v._v("[ ] 13、装饰器模式")]),v._v(" "),i("li",[v._v("[ ] 14、过滤器模式")]),v._v(" "),i("li",[v._v("[ ] 15、组合模式")]),v._v(" "),i("li",[v._v("[ ] 16、解释器模式")]),v._v(" "),i("li",[v._v("[ ] 17、迭代器模式")]),v._v(" "),i("li",[v._v("[ ] 18、中介者模式")]),v._v(" "),i("li",[v._v("[ ] 19、备忘录模式")]),v._v(" "),i("li",[v._v("[ ] 20、桥接模式")]),v._v(" "),i("li",[v._v("[ ] 21、外观模式")]),v._v(" "),i("li",[v._v("[ ] 22、空对象模式")]),v._v(" "),i("li",[v._v("[ ] 23、原型模式")]),v._v(" "),i("li",[v._v("[ ] 24、享元模式")]),v._v(" "),i("li",[v._v("[ ] 25、访问者模式")]),v._v(" "),i("li",[v._v("[ ] 26、MVC模式")]),v._v(" "),i("li",[v._v("[ ] 27、业务代表模式")]),v._v(" "),i("li",[v._v("[ ] 28、组合模式")]),v._v(" "),i("li",[v._v("[ ] 29、数据访问对象模式")]),v._v(" "),i("li",[v._v("[ ] 30、前端控制器模式")]),v._v(" "),i("li",[v._v("[ ] 31、拦截过滤模式")]),v._v(" "),i("li",[v._v("[ ] 32、服务定位模式")]),v._v(" "),i("li",[v._v("[ ] 33、传输对象模式")])]),v._v(" "),i("Valine")],1)}),[],!1,null,null,null);_.default=l.exports}}]);